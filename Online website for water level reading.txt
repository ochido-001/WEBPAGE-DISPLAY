<!DOCTYPE html>
<html>
<head>
  <title>Water Tank Level Monitor</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@3.8.0/dist/chart.min.js"></script>
  <style>
    body {
      font-family: sans-serif;
    }

    .container {
      width: 80%;
      margin: 0 auto;
    }

    .header {
      text-align: center;
      margin-bottom: 20px;
    }

    .chart {
      width: 100%;
      height: 400px;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h2>Water Tank Level Monitor</h2>
    </div>

    <div id="chart"></div>

    <script>
      // Connect to the Arduino using WebSocket
      const ws = new WebSocket('ws://localhost:8080');

      // Initialize the chart
      const chart = new Chart(document.getElementById('chart'), {
        type: 'line',
        data: {
          labels: [],
          datasets: [{
            label: 'Water Level (cm)',
            data: [],
            borderColor: '#3e95cd',
            borderWidth: 2
          }]
        },
        options: {
          scales: {
            yAxes: [{
              ticks: {
                beginAtZero: true
              }
            }]
          }
        }
      });

      // Update the chart with data received from the Arduino
      ws.onmessage = function(event) {
        const data = JSON.parse(event.data);
        const waterLevel = data.waterLevel;

        chart.data.labels.push(new Date().toLocaleTimeString());
        chart.data.datasets[0].data.push(waterLevel);
        chart.update();
      };
    </script>
  </div>
</body>
</html>


This code will create a simple web page that displays a real-time graph of the water level in the tank. The page will connect to an Arduino running the code provided in the previous step using WebSocket, and it will update the graph as new data is received from the Arduino.

Please note that you will need to modify the code to match the specific URL of your Arduino WebSocket server. You can also add additional features to the code, such as historical data storage and displaying warnings when the water level reaches certain thresholds.
